{% extends "layout.jinja2" %}

{#
<!-- {% block pagestyles %}
  {% assets "home_less_bundle" %}
    <link href="{{ ASSET_URL }}" rel="stylesheet" type="text/css">
  {% endassets %}
{% endblock %} -->
#}

{% block content %}
  {% set active_category = "directory" -%}
  {% set active_page = "roles" -%}
  {% set sub_active_page = 'home' -%}
  {% include "navigation.jinja2" %}

    <div class="row">
      <h1>{{ title }}</h1>
    </div>

    {# <div class="row">
        <div class="card border-info mb-3"  >

          <div class="card-header">Notes:</div>
          <div class="card-body">
              <p class="card-text">Currently uses "N/A" for gauges which were sourced from scraping the website vs onchain. 
              Mostly refered to as "Core". These pools do not show on the table below due to lack of creation blocktime.
              </p>
              <p class="card-text">Currently there is not a record of all deployments.
              </p>
              <p class="card-text">Rows with a <strong>Vote Timestamp</strong> have been whitelisted by governance to recieve CRV issuance as determined by gauge vote.
              </p>
          </div>
        </div>

    </div> #}

 <div class="row">
    <p></p>
    <h4 class="text-info">Role Registry</h4>
    {# <p class="text-{{table_tag}}">Not all gauge factories are currently covered, so this data is incomplete</p> #}

    <div id='table_1' ></div>
</div>



<script type='text/javascript'>
      new gridjs.Grid({
        columns: [
            { id: 'known_as', name: 'Known As' ,            
            },
            { id: 'address', name: 'Address' ,
                formatter: (_, row) => gridjs.html(
                `${row.cells[1].data.toString()}`
                )               
            },
            { id: 'curve_vecrv_locker', name: 'veCRV Locker' } ,   
            { id: 'curve_voters', name: 'veCRV Voter' } ,   
            { id: 'convex_snapshot_voter', name: 'vlCVX Voter' } ,   
            { id: 'convex_delegate', name: 'vlCVX Delegate' } ,   
            { id: 'convex_delegator', name: 'vlCVX Delegator' } ,   
            { id: 'convex_vlcvx_locker', name: 'vlCVX Locker' } ,   
            { id: 'stakedao_snapshot_voter', name: 'sdCRV Voter' } ,   
            { id: 'stakedao_delegate', name: 'sdCRV Delegate' } ,   
            { id: 'stakedao_delegator', name: 'sdCRV Delegator' } , 
            { id: 'stakedao_sdcrv_staker', name: 'sdCRV Staker' } ,   
            { id: 'stakedao_vesdt_locker', name: 'veSDT Locker' } ,
        ],
        data: [
          {% for index, row in df_roles.iterrows() %}
            {
                'known_as': '{{ row['known_as'] }}',
                'address': `<a href={{ url_for('address_book_bp.show_roles', actor_addr = row['address']) }}>{{row['address']}}</a>`,
                'curve_vecrv_locker': '{{ row['curve_vecrv_locker']| string }}',
                'curve_voters': '{{ row['curve_voters']| string }}',
                'convex_snapshot_voter': '{{ row['convex_snapshot_voter']| string }}',
                'convex_delegate': '{{ row['convex_delegate']| string }}',
                'convex_delegator': '{{ row['convex_delegator']| string }}',
                'convex_vlcvx_locker': '{{ row['convex_vlcvx_locker']| string }}',
                'stakedao_snapshot_voter': '{{ row['stakedao_snapshot_voter']| string }}',
                'stakedao_delegate': '{{ row['stakedao_delegate']| string }}',
                'stakedao_delegator': '{{ row['stakedao_delegator']| string }}',
                'stakedao_sdcrv_staker': '{{ row['stakedao_sdcrv_staker']| string }}',
                'stakedao_vesdt_locker': '{{ row['stakedao_vesdt_locker']| string }}',


            },
          {% endfor %}
        ],
        {% with max_size = 10 %}
            {% include 'table_format_helper.jinja2' %}
        {% endwith %}
      }).render(document.getElementById('table_1'));
</script>



{% endblock %}
