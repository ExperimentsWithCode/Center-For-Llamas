{% extends "layout.jinja2" %}

{#
<!-- {% block pagestyles %}
  {% assets "home_less_bundle" %}
    <link href="{{ ASSET_URL }}" rel="stylesheet" type="text/css">
  {% endassets %}
{% endblock %} -->
#}

{% block content %}
  {% include "navigation.jinja2" %}

    <div class="row">
      <h1>{{ title }}</h1>
    </div>
    <div class="row">
 
      <div class="card border-info mb-3" style="max-width: 50%;" >
      <div class="card-header">Pool Liquidity</div>
      <div class="card-body"> 
          <h4 class="card-title">{{ df_curve_liquidity_aggregates.index | length }} Liquidity Pools Tracked</h4>
          <p class="card-text">This measures liquidity vs votes</p>

      </div>
    </div>


    </div>

    {# <div class="row">

        <div class="card text-white bg-secondary mb-3" >
        <div class="card-header">Current Votes</div>
        <div class="card-body">
            <div id="chart2" class="chart2"></div>

        </div>
        </div>
    </div> #}



        <div id="liquidity_table"></div>





    </div>

  

<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script type='text/javascript'>
  var graphs = {{graphJSON | safe}};
  Plotly.plot('chart',graphs,{});
</script>

<script type='text/javascript'>
      new gridjs.Grid({
        columns: [
            { id: 'date', name: 'date' },
            { id: 'pool_name', name: 'Pool Name' },
            { id: 'liquidity', name: 'Liquidity',
                formatter: (_, row) =>  `${row.cells[2].data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`,
                {% include 'utility_sort_float.jinja2' %} 

            },
            { id: 'liquidity_native', name: 'Liquidity Native',
                formatter: (_, row) =>  `${row.cells[3].data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`,
                {% include 'utility_sort_float.jinja2' %} 

            },
            { id: 'token_symbol', name: 'Tradeable Assets'},
            { id: 'gauge_addr', name: 'Gauge Address' },
            { id: 'percent', name: 'Percent',
                {% include 'utility_sort_float.jinja2' %} 

            },
            { id: 'liquidity_over_votes', name: 'Liquidity/Votes',
                {# formatter: (_, row) =>  `${row.cells[7].data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`, #}
                {% include 'utility_sort_float.jinja2' %} 

            },
            { id: 'pool_address', name: 'Pool Address',
                formatter: (_, row) => gridjs.html(
                `<a href=${row.cells[9].data}>${row.cells[8].data}</a>`
              )
            },

            { id: '_', name: '_', formatter: (_, row) => gridjs.html(``) },

        ],
        data: [
          {% for index, row in df_curve_liquidity_aggregates.iterrows() %}
            {
                'date': '{{ row['date'] }}',
                'pool_name': '{{ row['pool_name'] }}',

                'liquidity': '{{ row['liquidity'] | round(2) }}',
                'liquidity_native': '{{ row['liquidity_native']| round(2) }}',
                'token_symbol': '{{ row['token_symbol'] |  replace("'", "")  }}',

                'gauge_addr': '{{ row['gauge_addr'] }}',
                'percent': '{{ row['percent'] | round(4) }}',
                'liquidity_over_votes': '{{ row['liquidity_over_votes']  }}',
                'pool_address': '{{ row['pool_address'] }}',

                '_': `{{ url_for('curve_liquidity_bp.show', gauge_addr = row['gauge_addr']) }}`

            },
          {% endfor %}
        ],
        search: true,
        sort: true,
        pagination: {
          limit: 50,
          summary: true
        },
        className: {
          {# td: 'my-td-class', #}
          th: 'table-primary',
          table: 'table table-hover' 
        }
      }).render(document.getElementById('liquidity_table'));
</script>

{# <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script type='text/javascript'>
  var graphs = {{graphJSON | safe}};
  Plotly.plot('chart',graphs,{});
</script>
<script type='text/javascript'>
  var graphs2 = {{graphJSON2 | safe}};
  Plotly.plot('chart2',graphs2,{});
</script> #}
{% endblock %}
